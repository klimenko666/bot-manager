import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import executor
from app import sql
import config
from config import ADMIN_USERS, ADMIN_MESSAGE
import datetime

import asyncio
loop = asyncio.get_event_loop()
import logging
logging.basicConfig(level=logging.INFO)


bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())
# c–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î SQLite –π–æ—É
sql.create_tables()


@dp.message_handler(commands=['start'])
async def send_start(message: types.Message):
    user_id = message.from_user.id
    data_reg = message.date
    user = sql.get_user_by_id(user_id)
    
    if not user:
        # e—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        user_info = {
            'tg_id': user_id,
            'pos': 'main_menu',
            'data_reg': data_reg, 
            'profile': {"organization": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "organization_adress": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "organization_inn": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "organization_phone": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "history_ticket": "", "data_ticket": "", "user_name": ""}
        }
        sql.add_user(**user_info)
        text_no_user = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bot-Managerüë®‚Äçüíª –∫–æ–º–ø–∞–Ω–∏–∏ <b>Speedy Vortex</b>! –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="üè¢ –ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è", callback_data="my_company"))
        await message.answer(text_no_user, reply_markup=keyboard, parse_mode="HTML")
        
    else:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ–Ω\–∫–ª–æ—É–∑ —Ç–∏–∫–µ—Ç–æ–≤ 
        open_ticket = sql.get_total_tickets_by_status_for_user(user_id, "–í —Ä–∞–±–æ—Ç–µ")
        closed_ticket = sql.get_total_tickets_by_status_for_user(user_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        # —á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        profile = sql.read_profile(user_id)
        sql.update_pos('main_menu', 'tg_id', user_id)
        organization = profile.get("organization", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        organization_phone = profile.get("organization_phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        text_user =  (f"<b>üßë‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> \n\n" 
                f"<b>üìã –ö–æ–º–ø–∞–Ω–∏—è: </b> {organization}\n"
                f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {organization_phone}\n\n"
                
                f"<b>üì¨–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:</b> {open_ticket}\n" 
                f"<b>üì≠–ó–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:</b> {closed_ticket}\n" 
                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è"
        )
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="üè¢ –ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è", callback_data="my_company"),
                    InlineKeyboardButton(text="üì• –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_ticket"))
        keyboard.add(InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="new_ticket"))
                
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫–∏, –¥–µ–Ω—å–≥–∏, —Ç—ë–ª–∫–∏, —Ç–∞—á–∫–∏
        if user_id in ADMIN_USERS:
            ticket_menu_admin = types.InlineKeyboardButton("ü§ò –¢–∏–∫–µ—Ç –º–µ–Ω—é", callback_data="admin_panel")
            keyboard.add(ticket_menu_admin)
        await message.answer(text_user, reply_markup=keyboard, parse_mode="HTML")
       
    
# –∫–æ–º–∞–Ω–¥–∞ /start
def main_menu(tg_id):
    sql.update_pos('main_menu', 'tg_id', tg_id)
    user_id = tg_id
    open_ticket = sql.get_total_tickets_by_status_for_user(tg_id, "–í —Ä–∞–±–æ—Ç–µ")
    closed_ticket = sql.get_total_tickets_by_status_for_user(tg_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
    profile = sql.read_profile(tg_id)
    organization = profile.get("organization", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    organization_phone = profile.get("organization_phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    text =  (f"<b>üßë‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> \n\n" 
            f"<b>üìã –ö–æ–º–ø–∞–Ω–∏—è: </b> {organization}\n"
            f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {organization_phone}\n\n"
            
            f"<b>üì¨–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:</b> {open_ticket}\n" 
            f"<b>üì≠–ó–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:</b> {closed_ticket}\n" 
            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è"
    )
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üè¢ –ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è", callback_data="my_company"),
                 InlineKeyboardButton(text="üì• –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_ticket"))
    keyboard.add(InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="new_ticket"))
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫–∏, –¥–µ–Ω—å–≥–∏, —Ç—ë–ª–∫–∏, —Ç–∞—á–∫–∏
    if user_id in ADMIN_USERS:
        ticket_menu_admin = types.InlineKeyboardButton("ü§ò–¢–∏–∫–µ—Ç –º–µ–Ω—é", callback_data="admin_panel")
        keyboard.add(ticket_menu_admin)
    return text, keyboard
    
    
def new_ticket(tg_id):
    text = (f"<b>üì§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏</b>\n\n" 
            # f" - üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n"
            f" - üß© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n"
            f"<b>–ü—Ä–∏–º–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:</b> \n<i>–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–∞ 4 –ü–ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.</i>")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return text, keyboard 


def my_ticket(tg_id):
    profile = sql.read_profile(tg_id)
    user_tickets_in_progress = sql.get_tickets_in_progress_by_user_id(tg_id)
    total_user_tickets_in_progress = len(user_tickets_in_progress)
    open_ticket = str(total_user_tickets_in_progress) if total_user_tickets_in_progress else "0"
    organization = profile.get("organization")
    organization_address = profile.get("organization_adress")
    
    if user_tickets_in_progress:
        text = (f"<b>üì• –ú–æ–∏ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ</b>\n\n"
                     f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {organization}\n"
                     f"<b>–ê–¥—Ä–µ—Å –∑–∞—è–≤–∫–∏:</b> {organization_address}\n" 
                     f"<b>–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ:</b> {open_ticket}\n\n"
                     )     
        for ticket in user_tickets_in_progress:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∫–æ—Ä—Ç–µ–∂–∞           
            text += (f"<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>#{ticket[0]} </code>\n"
                     f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {ticket[4]}\n"
                     f"<b>–î–∞—Ç–∞: </b>{ticket[5]}\n"
                     f"<b>–°—Ç–∞—Ç—É—Å:</b> {ticket[6]}\n"
                     )
    else:
        text = '<b>üì• –ú–æ–∏ –∑–∞—è–≤–∫–∏ </b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ..  ü§∑‚Äç‚ôÇÔ∏è \n- <i>–ß—Ç–æ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é </i><b>"üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"</b>'

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚òëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫", callback_data="my_ticket_history"))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return text, keyboard


def my_ticket_history(tg_id, page=1, page_size=4):
    completed_tickets = sql.get_completed_tickets_by_user(tg_id)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    if completed_tickets:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ
        if len(completed_tickets) > page_size:
            start_index = (page - 1) * page_size
            end_index = start_index + page_size
            current_page_tickets = completed_tickets[start_index:end_index]
            text = f"<b>üì® –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):</b>\n\n"
        else:
            current_page_tickets = completed_tickets
            text = "<b>üì® –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:</b>\n\n"
        
        for ticket in current_page_tickets:
            text += f"‚úÖ\n" \
                    f"<b>‚îú –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>#{ticket[0]}</code>\n" \
                    f"<b>‚îú –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> {ticket[5]}\n" \
                    f"<b>‚îú –°–æ–æ–±—â–µ–Ω–∏–µ:</b> - <em>{ticket[4]}</em>\n" \
                    f"<b>‚îî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>  - <em>{ticket[7]}</em>\n\n"
                    
    else:
        text = "ü§∑‚Äç‚ôÇÔ∏è –£–ø—Å.. –£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫."
        
    keyboard = InlineKeyboardMarkup()
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ
    if len(completed_tickets) > page_size:
        if page > 1:
            keyboard.row(InlineKeyboardButton(text="üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"my_ticket_page_{page - 1}"))
        if end_index < len(completed_tickets):
            keyboard.insert(InlineKeyboardButton(text="üîú –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"my_ticket_page_{page + 1}"))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_ticket"))
    return text, keyboard


def my_company(tg_id):
    profile = sql.read_profile(tg_id)
    organization = profile.get("organization", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    organization_address = profile.get("organization_adress", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    organization_inn = profile.get("organization_inn", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    organization_phone = profile.get("organization_phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–ù–§–û –æ –∫–æ–º–ø–∞–Ω–∏–∏
    text = (f"<b>üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n" 
           f"<b>üìã –ö–æ–º–ø–∞–Ω–∏—è:</b> {organization}\n" 
           f"<b>üìç –ê–¥—Ä–µ—Å:</b> {organization_address}\n" 
           f"<b>üìë –ò–ù–ù:</b> {organization_inn}\n" 
           f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:</b> <i>{organization_phone}</i>\n\n" 
           f"<b>–ó–ê–ü–û–õ–ù–ò–¢–¨ –î–ê–ù–ù–´–ï –û –ö–û–ú–ü–ê–ù–ò–ò ‚¨áÔ∏è </b>" )  
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text=f"{'‚úÖ' if organization != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else '‚ùå'} –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="edit_company_name"))
    keyboard.add(InlineKeyboardButton(text=f"{'‚úÖ' if organization_address != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else '‚ùå'} –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å", callback_data="edit_company_adress"))
    keyboard.add(InlineKeyboardButton(text=f"{'‚úÖ' if organization_inn != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else '‚ùå'} –ò–ù–ù", callback_data="edit_company_inn"))
    keyboard.add(InlineKeyboardButton(text=f"{'‚úÖ' if organization_phone != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else '‚ùå'} –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", callback_data="edit_company_phone"))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu"))
    return text, keyboard


def edit_company_name(tg_id):
    text = f"üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. \n–ü—Ä–∏–º–µ—Ä: <code> –û–û–û –†–û–ì–ê –ò –ö–û–ü–´–¢–ê </code>"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_company"))
    return text, keyboard

def edit_company_adress(tg_id):
    text = f"üìç–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. \n–ü—Ä–∏–º–µ—Ä: <code> –≥. –ò–≤–∞–Ω–æ–≤–æ, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 3 –æ—Ñ. 1 </code>"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_company"))
    return text, keyboard
    
def edit_company_inn(tg_id):
    text = f"üìë –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. \n–ü—Ä–∏–º–µ—Ä: <code> 3700010101 </code>"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_company"))
    return text, keyboard

def edit_company_phone(tg_id):
    text = f"‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. \n–ü—Ä–∏–º–µ—Ä: <code> +79100009999 </code>"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_company"))
    return text, keyboard
      
def done_ticket(tg_id):
    last_ticket_number = sql.get_last_ticket_number()   
    text = f'üéâü•≥ –£—Å–ø–µ—Ö, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! \n\n<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: </b><code>#{last_ticket_number}</code>. \n\n<i>PS: –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Ä–∞–∑–¥–µ–ª–µ</i> <b>"üì• –ú–æ–∏ –∑–∞—è–≤–∫–∏"</b>'
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üßë‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", parse_mode="HTML", callback_data="main_menu"))
    return text, keyboard


# –∞–¥–º–∏–Ω–∫–∞ –π–æ—É—É—É
def admin_panel():
    total_open_tickets = sql.get_total_tickets_by_status_admin("–í —Ä–∞–±–æ—Ç–µ")  # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ "–í —Ä–∞–±–æ—Ç–µ"
    total_closed_tickets = sql.get_total_tickets_by_status_admin("–ó–∞–≤–µ—Ä—à–µ–Ω–∞")  # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    all_tickets_in_progress = sql.get_all_tickets_in_progress()
    
    text = f"<b>ü§ò –¢–∏–∫–µ—Ç –º–µ–Ω—é üí≤</b>\n\n"
    text += f"<b>üî•–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ:</b> {total_open_tickets}\n"
    text += f"<b>üëç–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:</b> {total_closed_tickets}\n\n"
    text += f"<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b> <i>–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ä–∞–±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∏—Ö –∑–∞–∫—Ä—ã—Ç–∏–∏!</i>"
    
    keyboard = InlineKeyboardMarkup()
    for ticket in all_tickets_in_progress:
        ticket_info = f"–ó–∞—è–≤–∫–∞ #{ticket[0]} - {ticket[5]}" # –ù–æ–º–µ—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        keyboard.add(InlineKeyboardButton(text=ticket_info, callback_data=f"ticket_{ticket[0]}"))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return text, keyboard



@dp.callback_query_handler(lambda query: query.data.startswith(('ticket_', 'my_ticket_page_')))
async def handle_ticket_callback(query: types.CallbackQuery):
    user_id = query.from_user.id
    tg_id = user_id
    

    if query.data.startswith('ticket_'):
        ticket_id = query.data.split('_')[1]
        ticket_info = sql.get_ticket_info(ticket_id)
        sql.update_pos(f'ticket_details_{ticket_info[0]}', 'tg_id', user_id)
        await query.answer()
        text = f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b> <code>#{ticket_info[0]}\n\n</code>" \
               f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> <a href='tg://user?id={ticket_info[1]}'>{ticket_info[1]}</a>\n" \
               f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {ticket_info[2]}\n" \
               f"<b>–ê–¥—Ä–µ—Å:</b> {ticket_info[3]}\n\n" \
               f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> - <em>{ticket_info[4]}</em>\n\n" \
               f"<b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> {ticket_info[5]}\n" \
               f"<b>–°—Ç–∞—Ç—É—Å:</b> {ticket_info[6]}\n\n" \
               f"<em>‚ö†Ô∏è –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –í –æ—Ç–≤–µ—Ç –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ–º!</em>"
               
        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")

        keyboard.add(back_button)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    
    
    if query.data.startswith('my_ticket_page_'):
        page = int(query.data.split('_')[3])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫–æ–ª–±–µ–∫–∞
        await query.answer()                  # –û—Ç–≤–µ—Ç–∏–º –Ω–∞ –∫–æ–ª–±–µ–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç–∏–ª–∫—É"
        tg_id = query.from_user.id
        text, keyboard = my_ticket_history(tg_id, page)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")



# –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏ 
@dp.callback_query_handler()
async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
    user_id = query.from_user.id
    tg_id = user_id
        
    if query.data == 'admin_panel':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('admin_panel', 'tg_id', user_id)
        await query.answer()
        text, keyboard = admin_panel()
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    if query.data == 'main_menu':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('main_menu', 'tg_id', user_id)
        await query.answer()
        text, keyboard = main_menu(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    if query.data.startswith('complete_'):   
        ticket_id = query.data.split('_')[1]
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('complete_', 'tg_id', user_id)
        await query.answer()
        sql.update_ticket_status(ticket_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        ticket_comm_done = sql.read_ticket_comment(ticket_id)
        ticket_info = sql.get_ticket_info(ticket_id)
            
        current_time = datetime.datetime.now()
        time_ticket = datetime.datetime.strptime(ticket_info[5], "%Y-%m-%d %H:%M:%S")
        time_difference = current_time - time_ticket
        
        # –¥–µ–ª–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        total_seconds = time_difference.total_seconds()
        hours = int(total_seconds // 3600) 

        # —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        user_id = ticket_info[1]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–¥–∞—á—É
        completion_message = f"üéâ –ó–∞–¥–∞—á–∞ <code>#{ticket_id}</code> –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n<b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {hours} —á–∞—Å–∞(–æ–≤).\n\n<b>–û—Ç–≤–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> - <em>{ticket_comm_done}</em>\n\n<em>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.</em>"
        
        back_button_user = types.InlineKeyboardButton("üßë‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        history_ticket = InlineKeyboardButton(text="‚òëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫", callback_data="my_ticket_history")
        keyboard_markup_user = types.InlineKeyboardMarkup().add(history_ticket, back_button_user)
        
        back_button_admin = types.InlineKeyboardButton("ü§ò–¢–∏–∫–µ—Ç –º–µ–Ω—é", callback_data="admin_panel")
        keyboard_markup_admin = types.InlineKeyboardMarkup().add(back_button_admin)
        
        await bot.send_message(user_id, completion_message, reply_markup=keyboard_markup_user, parse_mode="HTML")
        await bot.send_message(query.from_user.id, completion_message, reply_markup=keyboard_markup_admin, parse_mode="HTML")  
        
    
    if query.data == 'my_company':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('my_company', 'tg_id', user_id)
        await query.answer()
        text, keyboard = my_company(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
       
    if query.data == 'edit_company_name':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('edit_company_name', 'tg_id', user_id)
        await query.answer()
        text, keyboard = edit_company_name(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    if query.data == 'edit_company_adress':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('edit_company_adress', 'tg_id', user_id)
        await query.answer()
        text, keyboard = edit_company_adress(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")     

    if query.data == 'edit_company_inn':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('edit_company_inn', 'tg_id', user_id)
        await query.answer()
        text, keyboard = edit_company_inn(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
 
    if query.data == 'edit_company_phone':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('edit_company_phone', 'tg_id', user_id)
        await query.answer()
        text, keyboard = edit_company_phone(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
             
    if query.data == 'new_ticket':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('new_ticket', 'tg_id', user_id)
        await query.answer()
        text, keyboard = new_ticket(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    if query.data == 'my_ticket':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('my_ticket', 'tg_id', user_id)
        await query.answer()
        text, keyboard = my_ticket(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")      

    if query.data == 'my_ticket_history':
        # –æ–±–Ω–æ–≤–∞ —è—á–µ–π–∫–∏ 'pos' –≤ –ë–î—à–∫–µ
        sql.update_pos('my_ticket_history', 'tg_id', user_id)
        await query.answer()
        text, keyboard = my_ticket_history(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")   
        
        
        
        
# –æ–±—Ä–∞—Ç–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç —Å–º—Å
@dp.message_handler()
async def handle_text_input(message: types.Message):
    
    user_id = message.from_user.id
    username = message.from_user.username
    profile = sql.read_profile(user_id)  
    organization_name = profile.get("organization", "")
    organization_address = profile.get("organization_adress", "") 
    organization_phone = profile.get("organization_phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    user_position = sql.read_cell('pos', 'tg_id', user_id)

    if user_position.startswith('ticket_details_'):
        parts = user_position.split('_')
        if len(parts) == 3 and parts[2].isdigit():
            ticket_id = int(parts[2])
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            comment_text = message.text
            sql.update_ticket_comment(ticket_id, comment_text)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å"
            complete_button = types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"complete_{ticket_id}")
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(complete_button)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            success_message = f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–∏–∫–µ—Ç—É <code>#{ticket_id}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n<b>–û—Ç–≤–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> - <em>{comment_text}</em>\n\n<em>‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.</em>"
            await message.reply(success_message, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.reply("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–∏–∫–µ—Ç–∞", parse_mode="HTML")
                
    if user_position == 'edit_company_name':
        sql.update_profile_data(user_id, 'organization', message.text)
        text, keyboard = my_company(user_id)
        await message.reply(text, reply_markup=keyboard, parse_mode="HTML")


    if user_position == 'edit_company_adress':
        sql.update_profile_data(user_id, 'organization_adress', message.text)
        text, keyboard = my_company(user_id)
        await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

    if user_position == 'edit_company_inn':
        sql.update_profile_data(user_id, 'organization_inn', message.text)
        text, keyboard = my_company(user_id)
        await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
        
    if user_position == 'edit_company_phone':
        sql.update_profile_data(user_id, 'organization_phone', message.text)
        text, keyboard = my_company(user_id)
        await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
        
    if user_position == 'new_ticket':
        user_ticket = user_id
        organization = organization_name
        addres_ticket = organization_address
        message_ticket = message.text
        time_ticket = message.date
        state_ticket = "–í —Ä–∞–±–æ—Ç–µ"
        ticket_comm = ""

        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –ë–î—à–∫—É
        sql.add_ticket(user_ticket, organization, addres_ticket, message_ticket, time_ticket, state_ticket, ticket_comm)
        last_ticket_number = sql.get_last_ticket_number()

        if last_ticket_number:
            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞ —Å –Ω–æ–º–µ—Ä–æ–º –ª–∞—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
            sql.update_profile_data(user_id, 'history_ticket', str(last_ticket_number))
            sql.update_profile_data(user_id, 'data_ticket', str(time_ticket))
            sql.update_profile_data(user_id, 'user_name', str(username))
            

            # –º–µ–Ω—é –±–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∏
            text, keyboard = done_ticket(user_id)
            await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
            
            admin_panel = types.InlineKeyboardButton("ü§ò–¢–∏–∫–µ—Ç –º–µ–Ω—éü´∞", callback_data="admin_panel")
            keyboard_markup = types.InlineKeyboardMarkup().add(admin_panel)
            
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
            admin_text = (f"üì¨‚ùóÔ∏è\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –Ω–æ–º–µ—Ä–æ–º <code>#{last_ticket_number}</code>."
                        f"\n\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n - <em>{message_ticket}</em>"
                        f"\n\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {organization_phone}\n"
                        f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {organization}\n"
                        f"<b>–ê–¥—Ä–µ—Å:</b> {addres_ticket}\n"
            )
            
            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –ø—É—à—É
            await bot.send_message(ADMIN_MESSAGE, admin_text, parse_mode="HTML", reply_markup=keyboard_markup)
        else:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
            

if __name__ == '__main__':
    executor = aiogram.executor.Executor(dp, loop=loop, skip_updates=True)
    executor.start_polling()
